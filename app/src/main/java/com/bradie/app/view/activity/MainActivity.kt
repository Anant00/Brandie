package com.bradie.app.view.activity

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import com.bradie.app.R
import com.bradie.app.databinding.ActivityMainBinding
import com.bradie.app.view.fragments.profile.ProfileFragment
import com.bradie.app.view.fragments.home.HomeFragment
import dagger.hilt.android.AndroidEntryPoint

/**
 * @AndroidEnteryPoint helps dagger-hilt in recognising that this class would be injected
 * with dependencies.
 */
@AndroidEntryPoint
class MainActivity : AppCompatActivity() {

    /**
     * the variable binding is a type of ActivityMainBinding.
     * This class is auto generated by the data-binding if <layout> is set at top
     * of xml of activity_main.xml file.
     */
    private lateinit var binding: ActivityMainBinding

    /**
     * lazy is a delegated property.
     * Read more @see {https://kotlinlang.org/docs/reference/delegated-properties.html}
     *
     * The lazy initialisation first checks if the variable has been called earlier. If yes, it
     * returns the same value with same hashCode. If not, it creates a new one and returns the value.
     * The variable is initialised only once.
     */
    private val homeFragment by lazy { HomeFragment() }
    private val exploreFragment by lazy { ProfileFragment() }
    private var activeFragment: Fragment = HomeFragment()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = DataBindingUtil.setContentView(this, R.layout.activity_main)
        init()
    }

    /**
     * Adding and hiding the fragments needed which are hosted by the MainActivity.
     * This helps us in maintaining the state of fragments and they won't be reloaded again.
     */
    private fun init() {
        supportFragmentManager.beginTransaction().apply {
            add(R.id.container, homeFragment, getString(R.string.home)).hide(homeFragment)
            add(R.id.container, exploreFragment, getString(R.string.explore)).hide(exploreFragment)
        }.commit()
        initListeners()
    }

    /**
     * Show the fragment when bottom nav is clicked.
     * Check if the active fragment is same as the on being requested. If yes, don't do anything.
     */
    private fun initListeners() {
        supportFragmentManager.beginTransaction()
            .show(homeFragment).commit()
        activeFragment = homeFragment

        binding.bottomNavigation.setOnNavigationItemSelectedListener { menuItem ->
            when (menuItem.itemId) {
                R.id.navigation_home -> {
                    if (activeFragment != homeFragment) {
                        supportFragmentManager.beginTransaction().hide(activeFragment)
                            .show(homeFragment).commit()
                        activeFragment = homeFragment
                        true
                    } else {
                        false
                    }
                }

                R.id.navigation_profile -> {
                    if (activeFragment != exploreFragment) {
                        supportFragmentManager.beginTransaction().hide(activeFragment)
                            .show(exploreFragment).commit()
                        activeFragment = exploreFragment
                        true
                    } else {
                        false
                    }
                }
                else -> {
                    false
                }
            }
        }
    }
}
